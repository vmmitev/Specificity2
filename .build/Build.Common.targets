<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <LocalBuildExtensionDirectory Condition="'$(LocalBuildExtensionDirectory)'==''">$(MSBuildProjectDirectory)\.build</LocalBuildExtensionDirectory>
    <MSBuildCommunityTasksPath Condition="'$(MSBuildCommunityTasksPath)'==''">$(LocalBuildExtensionDirectory)</MSBuildCommunityTasksPath>

    <Major Condition="'$(Major)'==''">0</Major>
    <Minor Condition="'$(Minor)'==''">1</Minor>
    <Build Condition="'$(Build)'=='' and '$(BUILD_NUMBER)'!=''">$(BUILD_NUMBER)</Build>
    <Build Condition="'$(Build)'==''">0</Build>
    <Revision Condition="'$(Revision)'==''">0</Revision>
    <AssemblyVersion Condition="'$(AssemblyVersion)'==''">$(Major).$(Minor).$(Build).$(Revision)</AssemblyVersion>
    <AssemblyFileVersion Condition="'$(AssemblyFileVersion)'==''">$(AssemblyVersion)</AssemblyFileVersion>
    <AssemblyInformationalVersion Condition="'$(AssemblyInformationalVersion)'=='' and '$(VCSNumber)'!=''">$(AssemblyVersion).$(VCSNumber)</AssemblyInformationalVersion>
    <AssemblyInformationalVersion Condition="'$(AssemblyInformationalVersion)'==''">$(AssemblyVersion)</AssemblyInformationalVersion>

    <Configuration Condition="'$(Configuration)'==''">Release</Configuration>
    <OutRoot Condition="'$(OutRoot)'==''">$(MSBuildProjectDirectory)\build</OutRoot>
    <OutDir Condition="'$(OutDir)'==''">$(OutRoot)\bin</OutDir>
    <RunCodeAnalysis Condition="'$(RunCodeAnalysis)'==''">true</RunCodeAnalysis>
    <CodeAnalysisTreatWarningsAsErrors Condition="'$(CodeAnalysisTreatWarningsAsErrors)'==''">true</CodeAnalysisTreatWarningsAsErrors>
    <BuildOptions Condition="'$(BuildOptions)'==''">Configuration=$(Configuration);OutDir=$(OutDir);RunCodeAnalysis=$(RunCodeAnalysis);CodeAnalysisTreatWarningsAsErrors=$(CodeAnalysisTreatWarningsAsErrors)</BuildOptions> <!-- CodeAnalysisTreatWarningsAsErrors -->

    <VsInstallDir Condition="'$(VsInstallDir)'==''">C:\Program Files (x86)\Microsoft Visual Studio 11.0\</VsInstallDir>
    <VsTestConsoleExe Condition="'$(VsTestConsoleExe)'==''">$(VsInstallDir)Common7\IDE\CommonExtensions\Microsoft\TestWindow\VSTest.Console.exe</VsTestConsoleExe>
    <!--<TestLogger Condition="'$(TestLogger)'=='' and '$(TEAMCITY_VERSION)'!=''">TeamCity</TestLogger>-->
    <TestLogger Condition="'$(TestLogger)'==''">trx</TestLogger>

    <Beta>True</Beta>
    <NuGetExe Condition="'$(NuGetExe)'==''">$(MSBuildProjectDirectory)\.nuget\nuget.exe</NuGetExe>
    <PkgVersion Condition="'$(PkgVersion)'=='' and '$(Beta)'=='True'">$(Major).$(Minor).$(Revision)-beta</PkgVersion>
    <PkgVersion Condition="'$(PkgVersion)'==''">$(Major).$(Minor).$(Revision)</PkgVersion>
  </PropertyGroup>

  <Import Project="$(LocalBuildExtensionDirectory)\MSBuild.Community.Tasks.targets"/>

  <!-- Restore -->
  <PropertyGroup>
    <RestoreDependsOn>
      BeforeRestore;
      CoreRestore;
      AfterRestore;
      $(RestoreDependsOn);
    </RestoreDependsOn>
  </PropertyGroup>
  <Target Name="Restore" DependsOnTargets="$(RestoreDependsOn)"/>
  <Target Name="BeforeRestore"/>
  <Target Name="AfterRestore"/>
  <Target Name="CoreRestore">
    <ItemGroup>
      <_ConfigFiles Include="$(MSBuildProjectDirectory)\**\packages.config"/>
    </ItemGroup>
    <Message Text="Restoring packages for [%(_ConfigFiles.FullPath)]"/>
    <Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command="&quot;$(NuGetExe)&quot; install %(_ConfigFiles.FullPath) -o &quot;$(MSBuildProjectDirectory)\packages&quot;"/>
  </Target>

  <!-- Version -->
  <Target Name="VersionValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="AssemblyVersion">
        <Value>$(AssemblyVersion)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="AssemblyFileVersion">
        <Value>$(AssemblyVersion)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="AssemblyInformationalVersion">
        <Value>$(AssemblyVersion)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="AssemblyCompany">
        <Value>$(AssemblyCompany)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="AssemblyCopyright">
        <Value>$(AssemblyCopyright)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="AssemblyInfoFiles">
        <RequiredValue>@(AssemblyInfoFiles)</RequiredValue>
        <RequiredFilePath>%(AssemblyInfoFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <VersionDependsOn>
      VersionValidateSettings;
      BeforeVersion;
      CoreVersion;
      AfterVersion;
      $(VersionDependsOn);
    </VersionDependsOn>
  </PropertyGroup>
  <Target Name="Version" DependsOnTargets="$(VersionDependsOn)"/>
  <Target Name="BeforeVersion"/>
  <Target Name="AfterVersion"/>
  <Target Name="CoreVersion">
    <Message Text="AssemblyVersion: $(AssemblyVersion)"/>
    <Message Text="AssemblyFileVersion: $(AssemblyFileVersion)"/>
    <Message Text="AssemblyInformationalVersion: $(AssemblyInformationalVersion)"/>
    <Message Text="AssemblyCompany: $(AssemblyCompany)"/>

    <AssemblyInfo CodeLanguage="CS"
                  OutputFile="%(AssemblyInfoFiles.FullPath)"
                  AssemblyVersion="$(AssemblyVersion)"
                  AssemblyFileVersion="$(AssemblyFileVersion)"
                  AssemblyInformationalVersion="$(AssemblyInformationalVersion)"
                  AssemblyCompany="$(AssemblyCompany)"
            		  AssemblyCopyright="$(AssemblyCopyright)"/>
    <Message Condition="'$(TEAMCITY_VERSION)'!=''"
             Text="##teamcity[buildNumber '$(AssemblyVersion)']"/>
  </Target>

  <!-- Clean -->
  <Target Name="CleanValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="BuildOptions">
        <Value>$(BuildOptions)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="OutRoot">
        <Value>$(OutRoot)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="BuildProjectFiles">
        <RequiredValue>@(BuildProjectFiles)</RequiredValue>
        <RequiredFilePath>%(BuildProjectFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
      <_RequiredItems Include="DocumentationProjectFiles">
        <RequiredValue>@(DocumentationProjectFiles)</RequiredValue>
        <RequiredFilePath>%(DocumentationProjectFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <CleanDependsOn>
      CleanValidateSettings;
      BeforeClean;
      CoreClean;
      AfterClean;
      $(CleanDependsOn);
    </CleanDependsOn>
  </PropertyGroup>
  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)"/>
  <Target Name="BeforeClean"/>
  <Target Name="AfterClean"/>
  <Target Name="CoreClean">
    <MSBuild Projects="%(BuildProjectFiles.FullPath)" Targets="Clean" Properties="$(BuildOptions)"/>
    <MSBuild Projects="%(DocumentationProjectFiles.FullPath)" Targets="Clean" Properties="$(BuildOptions)"/>
    <RemoveDir Directories="$(OutRoot)"/>
  </Target>

  <!-- Build -->
  <Target Name="BuildValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="BuildOptions">
        <Value>$(BuildOptions)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="BuildProjectFiles">
        <RequiredValue>@(BuildProjectFiles)</RequiredValue>
        <RequiredFilePath>%(BuildProjectFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <BuildDependsOn>
      BuildValidateSettings;
      BeforeBuild;
      CoreBuild;
      AfterBuild;
      $(BuildDependsOn);
    </BuildDependsOn>
  </PropertyGroup>
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)"/>
  <Target Name="BeforeBuild"/>
  <Target Name="AfterBuild"/>
  <Target Name="CoreBuild">
    <MSBuild Projects="%(BuildProjectFiles.FullPath)" Targets="Build" Properties="$(BuildOptions)"/>
  </Target>

  <!-- Rebuild -->
  <Target Name="RebuildValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="BuildOptions">
        <Value>$(BuildOptions)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="BuildProjectFiles">
        <RequiredValue>@(BuildProjectFiles)</RequiredValue>
        <RequiredFilePath>%(BuildProjectFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <RebuildDependsOn>
      RebuildValidateSettings;
      BeforeRebuild;
      CoreRebuild;
      AfterRebuild;
      $(RebuildDependsOn);
    </RebuildDependsOn>
  </PropertyGroup>
  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)"/>
  <Target Name="BeforeRebuild"/>
  <Target Name="AfterRebuild"/>
  <Target Name="CoreRebuild">
    <MSBuild Projects="%(BuildProjectFiles.FullPath)" Targets="Rebuild" Properties="$(BuildOptions)"/>
  </Target>

  <!-- Test -->
  <Target Name="TestValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="VsTestConsoleExe">
        <Value>$(VsTestConsoleExe)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="TestLogger">
        <Value>$(TestLogger)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="TestAssemblySpec">
        <Value>$(TestAssemblySpec)</Value>
      </_RequiredProperties>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <!--<Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>-->
               
    <!-- Validate any file/directory that should exist -->
    <!--<Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>-->
  </Target>
  <PropertyGroup>
    <TestDependsOn>
      Build;
      TestValidateSettings;
      BeforeTest;
      CoreTest;
      AfterTest;
      $(TestDependsOn);
    </TestDependsOn>
  </PropertyGroup>
  <Target Name="Test" DependsOnTargets="$(TestDependsOn)"/>
  <Target Name="BeforeTest"/>
  <Target Name="AfterTest"/>
  <Target Name="CoreTest">
    <Message Text="Running VSTest.Console.exe for project [%(TestAssemblies.Identity)]"/>
    <Message Text="TestAssemblies.Directory: %(TestAssemblies.RootDir)%(TestAssemblies.Directory)"/>
    <ItemGroup>
      <TestAssemblies Include="$(TestAssemblySpec)"/>
    </ItemGroup>
    <Exec Command="&quot;$(VsTestConsoleExe)&quot; &quot;%(TestAssemblies.FullPath)&quot; /UseVsixExtensions:True /Logger:$(TestLogger)"/>
  </Target>

  <!-- Documentation -->
  <Target Name="DocumentationValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="BuildOptions">
        <Value>$(BuildOptions)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="DocumentationProjectFiles">
        <RequiredValue>@(DocumentationProjectFiles)</RequiredValue>
        <RequiredFilePath>%(DocumentationProjectFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <DocumentationDependsOn>
      DocumentationValidateSettings;
      Build;
      BeforeDocumentation;
      CoreDocumentation;
      AfterDocumentation;
      $(DocumentationDependsOn);
    </DocumentationDependsOn>
  </PropertyGroup>
  <Target Name="Documentation" DependsOnTargets="$(DocumentationDependsOn)"/>
  <Target Name="BeforeDocumentation"/>
  <Target Name="AfterDocumentation"/>
  <Target Name="CoreDocumentation">
    <MSBuild Projects="%(DocumentationProjectFiles.FullPath)" Targets="Build" Properties="$(BuildOptions)"/>
  </Target>

  <!-- Package -->
  <Target Name="PackageValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="PkgVersion">
        <Value>$(PkgVersion)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="NuGetExe">
        <Value>$(NuGetExe)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="NuSpecFiles">
        <RequiredValue>@(NuSpecFiles)</RequiredValue>
        <RequiredFilePath>%(NuSpecFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <PackageDependsOn>
      PackageValidateSettings;
      Clean;
      Version;
      Build;
      Test;
      Documentation;
      BeforePackage;
      CorePackage;
      AfterPackage;
      $(PackageDependsOn);
    </PackageDependsOn>
  </PropertyGroup>
  <Target Name="Package" DependsOnTargets="$(PackageDependsOn)"/>
  <Target Name="BeforePackage"/>
  <Target Name="AfterPackage"/>
  <Target Name="CorePackage">
    <Exec WorkingDirectory="$(OutRoot)" Command="&quot;$(NuGetExe)&quot; pack &quot;%(NuSpecFiles.FullPath)&quot; -Version $(PkgVersion) -o &quot;$(OutRoot)&quot; -base &quot;$(OutRoot)\bin&quot; -Symbols"/>
  </Target>

  <!-- Push -->
  <Target Name="PushValidateSettings">
    <ItemGroup>
      <_RequiredProperties Remove="@(_RequiredProperties)"/>
      <_RequiredItems Remove="@(_RequiredItems)"/>
    </ItemGroup>

    <ItemGroup>
      <_RequiredProperties Include="NuGetExe">
        <Value>$(NuGetExe)</Value>
      </_RequiredProperties>
      <_RequiredProperties Include="NuGetSource">
        <Value>$(NuGetSource)</Value>
      </_RequiredProperties>

      <_RequiredItems Include="NuSpecFiles">
        <RequiredValue>@(NuSpecFiles)</RequiredValue>
        <RequiredFilePath>%(NuSpecFiles.FullPath)</RequiredFilePath>
      </_RequiredItems>
    </ItemGroup>

    <!-- Raise an error if any value in _RequiredProperties is missing -->
    <Error Condition="'%(_RequiredProperties.Value)'==''"
           Text="Missing required property [%(_RequiredProperties.Identity)]"/>
               
    <!-- Raise an error if any value in _RequiredItems is empty -->
    <Error Condition="'%(_RequiredItems.RequiredValue)'==''"
           Text="Missing required item value [%(_RequiredItems.Identity)]"/>
               
    <!-- Validate any file/directory that should exist -->
    <Error Condition="'%(_RequiredItems.RequiredFilePath)'!='' and !Exists('%(_RequiredItems.RequiredFilePath)')"
           Text="Unable to find expected path [%(_RequiredItems.RequiredFilePath)] on item [%(_RequiredItems.Identity)]"/>
  </Target>
  <PropertyGroup>
    <PushDependsOn>
      PushValidateSettings;
      Clean;
      Version;
      Build;
      Test;
      Documentation;
      Package;
      BeforePush;
      CorePush;
      AfterPush;
      $(PushDependsOn);
    </PushDependsOn>
  </PropertyGroup>
  <Target Name="Push" DependsOnTargets="$(PushDependsOn)"/>
  <Target Name="BeforePush"/>
  <Target Name="AfterPush"/>
  <Target Name="CorePush">
    <ItemGroup>
      <NuPkgFiles Include="$(OutRoot)\*.nupkg"/>
    </ItemGroup>
    <Exec WorkingDirectory="$(OutRoot)" Command="&quot;$(NuGetExe)&quot; push %(NuPkgFiles.FullPath) -Source $(NuGetSource)"/>
  </Target>
</Project>
