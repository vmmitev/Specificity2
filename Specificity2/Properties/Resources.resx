<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConstraintFailed" xml:space="preserve">
    <value>Constraint {0} failed.</value>
  </data>
  <data name="ContainsFail" xml:space="preserve">
    <value>String '{0}' does not contain '{1}'.</value>
  </data>
  <data name="DifferenceLessThanDelta" xml:space="preserve">
    <value>Expected a difference greater than {0}. Expected value: {1}. Actual value: {2}.</value>
  </data>
  <data name="DifferenceMoreThanDelta" xml:space="preserve">
    <value>Expected a difference no greater than {0}. Expected value: {1}. Actual value: {2}.</value>
  </data>
  <data name="DoesNotStartWith" xml:space="preserve">
    <value>String '{0}' does not start with '{1}'.</value>
  </data>
  <data name="DuplicateElement" xml:space="preserve">
    <value>Duplicate element found: &lt;{0}&gt;.</value>
  </data>
  <data name="ElementTypesAtIndexDoNotMatch" xml:space="preserve">
    <value>Element at index {0} is not of the expected type. Expected type: &lt;{1}&gt;. Actual type: &lt;{2}&gt;.</value>
  </data>
  <data name="ElementTypesAtIndexDoNotMatch2" xml:space="preserve">
    <value>Element at {0} is (null). Expected type: {1}.</value>
  </data>
  <data name="EndsWithFail" xml:space="preserve">
    <value>String '{0}' does not end with '{1}'.</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>Expected any value except: &lt;{0}&gt;. Actual: &lt;{1}&gt;.</value>
  </data>
  <data name="EqualTypes" xml:space="preserve">
    <value>Wrong type: {0}. Actual type: {1}.</value>
  </data>
  <data name="IsMatchFail" xml:space="preserve">
    <value>String '{0}' does not match pattern '{1}'.</value>
  </data>
  <data name="IsNotMatchFail" xml:space="preserve">
    <value>String '{0}' matches pattern '{1}'.</value>
  </data>
  <data name="MismatchedElements" xml:space="preserve">
    <value>The expected collection contains {0} occurrence(s) of &lt;{1}&gt;. The actual collection contains {2} occurrence(s).</value>
  </data>
  <data name="NoExceptionThrown" xml:space="preserve">
    <value>Expected exception type: &lt;{0}&gt;.</value>
  </data>
  <data name="NotContainsFail" xml:space="preserve">
    <value>String '{0}' contains '{1}'.</value>
  </data>
  <data name="NotEndsWithFail" xml:space="preserve">
    <value>String '{0}' ends with '{1}'.</value>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>Expected: &lt;{0}&gt;. Actual: &lt;{1}&gt;.</value>
  </data>
  <data name="NotEqualTypes" xml:space="preserve">
    <value>Expected type: {0}. Actual type: {1}.</value>
  </data>
  <data name="NullValue" xml:space="preserve">
    <value>(null)</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>String '{0}' starts with '{1}'.</value>
  </data>
  <data name="UnexpectedException" xml:space="preserve">
    <value>Exception thrown: &lt;{0}&gt;.</value>
  </data>
  <data name="UnexpectedExceptionType" xml:space="preserve">
    <value>Expected exception type: &lt;{0}&gt;. Actual exception type: &lt;{1}&gt;.</value>
  </data>
  <data name="EqualityOperatorNotDefinedForType" xml:space="preserve">
    <value>Equality operator not defined for type '{0}'.</value>
  </data>
  <data name="GreaterThanOperatorNotDefinedForType" xml:space="preserve">
    <value>Greater than operator not defined for type '{0}'</value>
  </data>
  <data name="GreaterThanOrEqualOperatorNotDefinedForType" xml:space="preserve">
    <value>Greater than or equal operator not defined for type '{0}'</value>
  </data>
  <data name="InequalityOperatorNotDefinedForType" xml:space="preserve">
    <value>Inequality operator not defined for type '{0}'.</value>
  </data>
  <data name="LessThanOperatorNotDefinedForType" xml:space="preserve">
    <value>Less than operator not defined for type '{0}'.</value>
  </data>
  <data name="LessThanOrEqualOperatorNotDefinedForType" xml:space="preserve">
    <value>Less than or equal operator not defined for type '{0}'.</value>
  </data>
  <data name="MultipleTestsFailed" xml:space="preserve">
    <value>Multiple tests failed.</value>
  </data>
  <data name="PropertyChangedWasNotRaised" xml:space="preserve">
    <value>PropertyChanged was not raised for {0} when '{1}' was changed.</value>
  </data>
  <data name="PropertyChangedWasUnexpectedlyRaised" xml:space="preserve">
    <value>PropertyChanged was unexpectedly raised for {0} when '{1}' was changed.</value>
  </data>
  <data name="TestingCompareToWithValuesFailed" xml:space="preserve">
    <value>Testing CompareTo with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingGenericCompareToWithValuesFailed" xml:space="preserve">
    <value>Testing generic CompareTo with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingGreaterThanOperatorWithValuesFailed" xml:space="preserve">
    <value>Testing operator &gt; with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingGreaterThanOrEqualOperatorWithValuesFailed" xml:space="preserve">
    <value>Testing operator &gt;= with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingIEquatableEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing IEquatable.Equals with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingLessThanOperatorWithValuesFailed" xml:space="preserve">
    <value>Testing operator &lt; with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingLessThanOrEqualOperatorWithValuesFailed" xml:space="preserve">
    <value>Testing operator &lt;= with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingObjectEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing Object.Equals with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingObjectGetHashCodeWithValuesFailed" xml:space="preserve">
    <value>Testing Object.GetHashCode failed with equivalent objects '{0}' and '{1}'.</value>
  </data>
  <data name="TestingOperatorEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing operator == with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingOperatorNotEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing operator != with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingSymmetryOfIEquatableEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing symmetry of IEquatable.Equals with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingSymmetryOfObjectEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing symmetry of Object.Equals with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingSymmetryOfOperatorEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing symmetry of operator == with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingSymmetryOfOperatorNotEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing symmetry of operator != with '{0}' and '{1}' failed.</value>
  </data>
  <data name="TestingTransitivityOfIEquatableEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing transitivity of IEquatable.Equals with '{0}', '{1}' and '{2}' failed.</value>
  </data>
  <data name="TestingTransitivityOfObjectEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing transitivity of Object.Equals with '{0}', '{1}' and '{2}' failed.</value>
  </data>
  <data name="TestingTransitivityOfOperatorEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing transitivity of operator == with '{0}', '{1}' and '{2}' failed.</value>
  </data>
  <data name="TestingTransitivityOfOperatorNotEqualsWithValuesFailed" xml:space="preserve">
    <value>Testing transitivity of operator != with '{0}', '{1}' and '{2}' failed.</value>
  </data>
  <data name="TheTypeDidNotOverrideObjectEqualsMethod" xml:space="preserve">
    <value>The type '{0}' did not override the 'Object.Equals' method.</value>
  </data>
  <data name="TheTypeDidNotOverrideObjectGetHashCodeMethod" xml:space="preserve">
    <value>The type '{0}' did not override the 'Object.GetHashCode' method.</value>
  </data>
  <data name="TheTypeDoesNotDefineEqualityOperators" xml:space="preserve">
    <value>The type '{0}' does not define equality operators.</value>
  </data>
  <data name="TheTypeShouldBeSealedWhenImplementingIEquatable" xml:space="preserve">
    <value>The type '{0}' should be sealed as a best practice when implementing 'IEquatable&lt;T&gt;'.</value>
  </data>
  <data name="ValueFailedVerification" xml:space="preserve">
    <value>{0} failed verification.</value>
  </data>
  <data name="NoEquivalenceClassesWereSpecified" xml:space="preserve">
    <value>No EquivalenceClasses were specified.</value>
  </data>
  <data name="ElementNumbersDoNotMatch" xml:space="preserve">
    <value>element count: &lt;{0}&gt;. Actual element count: &lt;{1}&gt;.</value>
  </data>
</root>